<?php
/**
 * This file defines the Helpers class of the plugin.
 *
 * @package SocialManager
 * @subpackage Helpers
 */

namespace NineCodes\SocialManager;

if ( ! defined( 'ABSPATH' ) ) { // If this file is called directly.
	die; // Abort.
}

/**
 * The Helpers class is used to assist in providing artbitrary functionalities.
 *
 * The Helpers class may be used across across both the public-facing side
 * of the site and the admin area without having to instantiate the class.
 *
 * @since 1.0.0
 */
final class Helpers {

	/**
	 * The default attribute prefix.
	 *
	 * @since 1.0.0
	 * @since 1.0.6 - Change the default attribute from 'ninecodes-social-manager'.
	 * @access public
	 * @var string
	 */
	public static $prefix = 'social-manager';

	/**
	 * Function method to get the social media icons in SVG.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @param string $site The name of social media in lowercase (e.g. 'facebook', 'twitter', 'googleples', etc.).
	 * @return string The icon of selected social media in SVG.
	 */
	public static function get_social_icons( $site = '' ) {

		$path = plugin_dir_url( dirname( __FILE__ ) );
		$prefix = esc_attr( self::get_attr_prefix() );

		$icons = array(
			'facebook'  => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-facebook\"/></svg>",
			'twitter'   => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-twitter\"/></svg>",
			'instagram' => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-instagram\"/></svg>",
			'pinterest' => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-pinterest\"/></svg>",
			'linkedin'  => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-linkedin\"/></svg>",
			'googleplus' => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-googleplus\"/></svg>",
			'youtube' => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-youtube\"/></svg>",
			'reddit' => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-reddit\"/></svg>",
			'tumblr' => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-tumblr\"/></svg>",
			'email' => "<svg aria-hidden=\"true\"><use xlink:href=\"#{$prefix}-icon-email\"/></svg>",
		);

		/**
		 * Filter all icons.
		 *
		 * @since 1.2.0
		 *
		 * @param string $context The context; which meta value to filter.
		 * @param array  $args An array of arguments.
		 *
		 * @var array
		 */
		$icons = apply_filters( 'ninecodes_social_manager_icons', $icons, 'all', array(
			'attr_prefix' => $prefix,
		) );

		$output = isset( $icons[ $site ] ) ? kses_icon( $icons[ $site ] ) : array_map( __NAMESPACE__ . '\\kses_icon', $icons );

		return $output;
	}

	/**
	 * Function method to get prefix that will be used in the HTML elements
	 * attributes (`class`, `id`, etc.) generated by this plugin.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @see Theme_Support
	 *
	 * @return string
	 */
	public static function get_attr_prefix() {

		$prefix = self::$prefix; // Default prefix.
		$custom = null;

		$support = self::theme_support();
		$support = $support->theme_support();

		if ( isset( $support['attr_prefix'] ) ) { // Alias.
			$custom = $support['attr_prefix'];
		}

		// If the custom prefix is not the same as the default then use it.
		if ( is_string( $custom ) && ! empty( $custom ) && $custom !== self::$prefix ) {
			$prefix = $custom;
		}

		return esc_attr( $prefix );
	}

	/**
	 * Method to get the button
	 *
	 * @since 2.0.0
	 * @access public
	 *
	 * @return string Whether html or json.
	 */
	public static function get_button_mode() {

		$button_mode = Options::get( 'mode', 'button_mode' );
		$theme_support = self::is_theme_support( 'button_mode' );

		if ( 'json' === $theme_support || 'json' === $button_mode ) {
			return 'json';
		}

		return 'html';
	}

	/**
	 * Get the options saved in the database `wp_options`.
	 *
	 * @since 2.0.0
	 *
	 * @return bool
	 */
	public static function get_button_content_status() {

		$include = (array) Options::get( 'button_content', 'include' );
		$include = array_keys( array_filter( $include, function( $arr ) {

			if ( 'on' !== $arr['enable'] ) {
				return false;
			}

			return $arr;
		} ) );

		if ( empty( $include ) ) {
			return false;
		}

		$post_type = (array) Options::get( 'button_content', 'post_type' );
		$post_type = array_keys( array_filter( $post_type ) );

		if ( empty( $post_type ) ) {
			return false;
		}

		return array(
			'include' => $include,
			'post_type' => $post_type,
		);
	}

	/**
	 * Check if the social media button image is active
	 *
	 * @since 2.0.0
	 * @access public
	 *
	 * @return bool|array
	 */
	public static function get_button_image_status() {

		$enable = (bool) Options::get( 'button_image', 'enable' );

		if ( ! $enable ) {
			return false;
		}

		$include = (array) Options::get( 'button_image', 'include' );
		$include = array_keys( array_filter( $include, function( $arr ) {

			if ( 'on' !== $arr['enable'] ) {
				return false;
			}

			return $arr;
		} ) );

		if ( empty( $include ) ) {
			return false;
		}

		$post_type = (array) Options::get( 'button_image', 'post_type' );
		$post_type = array_keys( array_filter( $post_type ) );

		if ( empty( $post_type ) ) {
			return false;
		}

		return array(
			'include' => $include,
			'post_type' => $post_type,
		);
	}

	/**
	 * Check if the meta tags is enabled
	 *
	 * @since 2.0.0
	 * @access public
	 *
	 * @return boolean
	 */
	public static function is_meta_tags_enabled() {

		$meta_site = Options::get( 'meta_site', 'enable' );

		return (bool) $meta_site;
	}

	/**
	 * Return the theme support data.
	 *
	 * @since 2.0.0
	 * @access public
	 *
	 * @param string $feature The feature name.
	 * @return Theme_Support
	 */
	public static function theme_support( $feature = '' ) {

		static $theme_support;

		if ( is_null( $theme_support ) ) {
			$theme_support = new Theme_Support();
		}

		return $theme_support;
	}

	/**
	 * Check if the theme support the given feature.
	 *
	 * @since 2.0.0
	 * @access public
	 *
	 * @param string $feature The feature name.
	 * @return bool
	 */
	public static function is_theme_support( $feature = '' ) {
		return self::theme_support()->is( $feature );
	}

	/**
	 * Method to check whether the page is an AMP page.
	 *
	 * @since 2.0.0
	 * @access public
	 *
	 * @return bool
	 */
	public static function in_amp() {
		return function_exists( 'is_amp_endpoint' ) && is_amp_endpoint();
	}
}
