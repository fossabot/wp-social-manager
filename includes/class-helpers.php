<?php
/**
 * This file defines the Helpers class of the plugin.
 *
 * @package SocialMediaManager
 * @subpackage Helpers
 */

namespace NineCodes\SocialMediaManager;

if ( ! defined( 'WPINC' ) ) { // If this file is called directly.
	die; // Abort.
}

/**
 * The Helpers class that is used to assist in providing artbitrary functionalities.
 *
 * The Helpers class may be used across across both the public-facing side
 * of the site and the admin area without having to instantiate the class.
 *
 * @since 1.0.0
 */
class Helpers {

	/**
	 * The default attribute prefix.
	 *
	 * @since 1.0.0
	 * @since 1.0.6 - Change the default attribute from 'ninecodes-social-manager'.
	 * @access public
	 * @var string
	 */
	public static $prefix = 'social-manager';

	/**
	 * Function method to get the social media icons in SVG.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @param string $name The name of social media in lowercase (e.g. 'facebook', 'twitter', 'googleples', etc.).
	 * @return string The icon of selected social media in SVG.
	 */
	final public static function get_social_icons( $name = '' ) {

		$path = plugin_dir_url( dirname( __FILE__ ) );
		$prefix = esc_attr( self::get_attr_prefix() );

		$icons = array(
			'facebook'  => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-facebook'/></svg>",
			'twitter'   => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-twitter'/></svg>",
			'instagram' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-instagram'/></svg>",
			'pinterest' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-pinterest'/></svg>",
			'linkedin'  => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-linkedin'/></svg>",
			'googleplus' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-googleplus'/></svg>",
			'youtube' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-youtube'/></svg>",
			'reddit' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-reddit'/></svg>",
			'dribbble' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-dribbble'/></svg>",
			'behance' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-behance'/></svg>",
			'github' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-github'/></svg>",
			'codepen' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-codepen'/></svg>",
			'email' => "<svg aria-hidden='true'><use xlink:href='#{$prefix}-icon-email'/></svg>",
		);

		/**
		 * Hooks to filter all the icons at once.
		 *
		 * @var array
		 */
		$icons = apply_filters( 'ninecodes_social_manager_icons', $icons, array(
			'attr-prefix' => $prefix,
		), '' );

		$output = isset( $icons[ $name ] ) ? $icons[ $name ] : $icons;

		$allowed_html = wp_kses_allowed_html( 'post' );
		$allowed_html['svg'] = array(
			'xmlns' => true,
			'viewbox' => true,
		);
		$allowed_html['path'] = array(
			'd' => true,
		);
		$allowed_html['use'] = array(
			'xlink:href' => true,
		);

		return wp_kses( $output, $allowed_html );
	}

	/**
	 * Function method to get prefix that will be used in the HTML elements
	 * attributes (`class`, `id`, etc.) generated by this plugin.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @see ThemeSupports
	 *
	 * @return string
	 */
	public static function get_attr_prefix() {

		$prefix = self::$prefix;
		$custom = null;

		$support = new ThemeSupports();
		$support = $support->theme_supports();

		if ( isset( $support['attr-prefix'] ) ) {
			$custom = $support['attr-prefix'];
		}

		if ( isset( $support['attr_prefix'] ) ) {
			$custom = $support['attr_prefix'];
		}

		// If the custom prefix is not the same as the default then use it.
		if ( is_string( $custom ) && ! empty( $custom ) && $custom !== self::$prefix ) {
			$prefix = $custom;
		}

		return esc_attr( $prefix );
	}
}
